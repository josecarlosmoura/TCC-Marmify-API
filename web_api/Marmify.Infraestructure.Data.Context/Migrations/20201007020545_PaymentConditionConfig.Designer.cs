// <auto-generated />
using System;
using Marmify.Infraestructure.Data.Context.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Marmify.Infraestructure.Data.Context.Migrations
{
    [DbContext(typeof(MarmifyContext))]
    [Migration("20201007020545_PaymentConditionConfig")]
    partial class PaymentConditionConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Marmify.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Neighborhood")
                        .HasColumnName("neighborhood");

                    b.Property<int>("Number")
                        .HasColumnName("number");

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .HasColumnName("street");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("address");
                });

            modelBuilder.Entity("Marmify.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_mail")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[normalized_mail] IS NOT NULL");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Marmify.Domain.Entities.Establishment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address");

                    b.Property<string>("Cnpj")
                        .HasColumnName("cnpj");

                    b.Property<string>("CompanyName")
                        .HasColumnName("company_name");

                    b.Property<string>("CorporateName")
                        .HasColumnName("corporate_name");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<bool>("IsPartner")
                        .HasColumnName("is_partner");

                    b.Property<string>("Neighborhood")
                        .HasColumnName("neighborhood");

                    b.Property<int>("Number")
                        .HasColumnName("number");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("establishment");

                    b.HasData(
                        new { Id = 1L, Address = "N/A", Cnpj = "N/A", CompanyName = "Administration", CorporateName = "Administration", Email = "N/A", IsPartner = false, Neighborhood = "N/A", Number = 0, Phone = "N/A" },
                        new { Id = 2L, Address = "N/A", Cnpj = "N/A", CompanyName = "User", CorporateName = "User", Email = "N/A", IsPartner = false, Neighborhood = "N/A", Number = 0, Phone = "N/A" }
                    );
                });

            modelBuilder.Entity("Marmify.Domain.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Available");

                    b.Property<string>("Description");

                    b.Property<long>("EstablishmentId");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Marmify.Domain.Entities.ItemPurchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ItemId");

                    b.Property<string>("ItemName");

                    b.Property<int>("ItemQuantity");

                    b.Property<decimal>("ItemValue");

                    b.Property<long>("PurchaseOrderId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("ItemPurchase");
                });

            modelBuilder.Entity("Marmify.Domain.Entities.PaymentCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("payment_condition");
                });

            modelBuilder.Entity("Marmify.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("DatePurchase");

                    b.Property<decimal>("DeliveryAmount");

                    b.Property<int>("DeliveryStatus");

                    b.Property<int>("DeliveryType");

                    b.Property<long>("EstablishmentId");

                    b.Property<long>("PaymentConditionId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("PaymentConditionId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("Marmify.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("CellPhone")
                        .HasColumnName("cell_phone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Cpf")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnName("date_birth");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<short>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<long>("EstablishmentId")
                        .HasColumnName("establishment_id");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<short>("LockoutEnabled")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number");

                    b.Property<short>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp");

                    b.Property<short>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[normalized_user_name] IS NOT NULL");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Marmify.Domain.Entities.UserFavorites", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EstablishmentId")
                        .HasColumnName("establishment_id");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.HasIndex("UserId");

                    b.ToTable("user_favorites");
                });

            modelBuilder.Entity("Marmify.Domain.Entities.UserPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PaymentConditionsId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentConditionsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPayment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_login");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<long>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_token");
                });

            modelBuilder.Entity("Marmify.Domain.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<long>");


                    b.ToTable("UserRole");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("Marmify.Domain.Entities.Address", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Marmify.Domain.Entities.Item", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.Establishment", "Establishment")
                        .WithMany("Itens")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Marmify.Domain.Entities.ItemPurchase", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.Item", "Item")
                        .WithMany("ItemPurchases")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marmify.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("ItemPurchases")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Marmify.Domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.Establishment", "Establishment")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Marmify.Domain.Entities.PaymentCondition", "PaymentCondition")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PaymentConditionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Marmify.Domain.Entities.User", "User")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Marmify.Domain.Entities.User", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.Establishment", "Establishment")
                        .WithMany("Users")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Marmify.Domain.Entities.UserFavorites", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.Establishment", "Establishment")
                        .WithMany("UserFavorites")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marmify.Domain.Entities.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Marmify.Domain.Entities.UserPayment", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.PaymentCondition", "PaymentConditions")
                        .WithMany("UserPayments")
                        .HasForeignKey("PaymentConditionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marmify.Domain.Entities.User", "User")
                        .WithMany("UserPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Marmify.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Marmify.Domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
